# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gES8xPUWi517NfvymfwNJ52BiRvoNyfm
"""

tree_nodes = 10
tree_from = [0,0,1,1,3,3,5,7,8]
tree_to = [4,1,2,3,5,7,6,8,9]
x,y,z = 4,6,9

import sys
class Graph():
 
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]
    def minDistance(self, dist, sptSet):
        min = sys.maxsize
        for u in range(self.V):
            if dist[u] < min and sptSet[u] == False:
                min = dist[u]
                min_index = u
 
        return min_index
    def dijkstra(self, src):
 
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        sptSet = [False] * self.V
 
        for cout in range(self.V):
            x = self.minDistance(dist, sptSet)
            sptSet[x] = True
            for y in range(self.V):
                if self.graph[x][y] > 0 and sptSet[y] == False and \
                        dist[y] > dist[x] + self.graph[x][y]:
                    dist[y] = dist[x] + self.graph[x][y]
 
        return dist
 
 
graph = [[0 for column in range(tree_nodes)]for row in range(tree_nodes)]
for i in range(len(tree_from)):
  graph[tree_from[i]][tree_to[i]] = 1
  graph[tree_to[i]][tree_from[i]] = 1


g = Graph(tree_nodes)
g.graph = graph
d1 = g.dijkstra(x)
d2 = g.dijkstra(y)
d3 = g.dijkstra(z)

result = 0
print(d1,d2,d3)

for i in range(tree_nodes):
  if(d1[i]>0 and d2[i]>0 and d3[i]>0):
    x1 = d1[i]
    x2 = d2[i]
    x3 = d3[i]
    x4 = [x1,x2,x3]
    x4.sort()
    if(x4[0]**2 + x4[1]**2 == x4[2]**2):
      result += 1

print(result)

!pip install openai

import openai

def GPT_Completion(texts):
  openai.api_key = "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"
  response = openai.Completion.create(
  engine="text-davinci-002",
  prompt =  texts,
  temperature = 0.6,
  top_p = 1,
  max_tokens = 64,
  frequency_penalty = 0,
  presence_penalty = 0
  )

  return print(response.choices[0].text)

recipe = 'advertisement for an elction that is'
GPT_Completion(recipe)